class Node:
    def __init__(self,data):
        self.val = data
        self.next = None
class MyLinkedList:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.head = None
        self.size = 0
        

    def get(self, index: 'int') -> 'int':
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        """
        if index < 0 or index >= self.size:
            return -1
        if not self.head:
            return -1
        cur = self.head
        for i in range(index):
            
            cur = cur.next
            
        return cur.val
            
            
        

    def addAtHead(self, val: 'int') -> 'None':
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        """
        
    
            
        cur = Node(val)
        cur.next = self.head
        self.head = cur
        
        self.size +=1
       
        

    def addAtTail(self, val: 'int') -> 'None':
        """
        Append a node of value val to the last element of the linked list.
        """
        cur = self.head 
        if cur is None:
            self.head = Node(val)
        else:
            while cur.next != None:
                cur = cur.next
            cur.next = Node(val)
        self.size +=1
        

    def addAtIndex(self, index: 'int', val: 'int') -> 'None':
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        """
        cur = self.head
        if index < 0 or index > self.size:
            return
        if index == 0:
            self.addAtHead(val)
        else:
            for i in range(index-1):
                cur = cur.next
            temp = Node(val)
            temp.next = cur.next
            cur.next = temp
            self.size +=1
        
       

    def deleteAtIndex(self, index: 'int') -> 'None':
        """
        Delete the index-th node in the linked list, if the index is valid.
        """
        if index < 0 or index >= self.size:
            return
        cur = self.head
        if index ==0:
            self.head = self.head.next
            self.size -=1
            
        else:
            for i in range(index-1):
                cur = cur.next
            cur.next = cur.next.next
            self.size -= 1
            
        
        
        


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
